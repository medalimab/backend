name: Deploy to Server via SSH

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/homagency/htdocs/homagency.ae/backend/
            # Si le dépôt n'existe pas, on le clone
            if [ ! -d "backend/.git" ]; then
              # Supprimer le dossier avec force et permissions
              sudo rm -rf backend || rm -rf backend
              git clone https://github.com/medalimab/backend.git backend || wget -qO- https://github.com/medalimab/backend/archive/refs/heads/master.tar.gz | tar xz && mv backend-master backend
              cd backend
            else
              cd backend
              git pull origin master || (cd .. && rm -rf backend && git clone https://github.com/medalimab/backend.git backend && cd backend)
            fi
            # Créer les dossiers de cache et corriger les permissions
            mkdir -p bootstrap/cache storage/logs storage/framework/cache storage/framework/sessions storage/framework/views
            chmod -R 775 bootstrap/cache storage
            chown -R www-data:www-data bootstrap/cache storage || chown -R apache:apache bootstrap/cache storage || chown -R nginx:nginx bootstrap/cache storage || true
            # Corriger les permissions de la base de données SQLite
            if [ -f "database/database.sqlite" ]; then
              chmod 664 database/database.sqlite
              chown www-data:www-data database/database.sqlite || chown apache:apache database/database.sqlite || chown nginx:nginx database/database.sqlite || true
            fi
            # Corriger les permissions du dossier database
            chmod 775 database
            chown www-data:www-data database || chown apache:apache database || chown nginx:nginx database || true
            # Copier .env si nécessaire
            [ ! -f .env ] && cp .env.example .env || true
            # Vérifier et configurer MySQL dans .env
            sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=mysql/' .env || true
            grep -q "DB_CONNECTION=mysql" .env || echo "DB_CONNECTION=mysql" >> .env
            export COMPOSER_ALLOW_SUPERUSER=1
            composer install --no-interaction --prefer-dist --optimize-autoloader
            php artisan key:generate --force || true
            php artisan migrate --force
            php artisan route:clear
            php artisan config:clear
            php artisan view:clear
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache